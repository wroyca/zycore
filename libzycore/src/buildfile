intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}

# Public headers.
#
pub = [dir_path] ../include/Zycore/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

lib{zycore}: $pub/{$pub_hdrs}

# Private headers and sources as well as dependencies.
#
lib{zycore}: {h c}{**} $impl_libs $intf_libs

# Build options.
#
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

c.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" \
              "-I$out_pfx_inc" "-I$src_pfx_inc"

# Zycore is a libc replacement. On Windows, it's necessary to explicitly
# define no_libc for Zycore types.
#
if ($c.target.class == 'windows')
  c.poptions += -DZYAN_NO_LIBC

obja{*}: c.poptions += -DZYCORE_STATIC_BUILD
objs{*}: c.poptions += -DZYCORE_SHARED_BUILD -DZYCORE_SHOULD_EXPORT

# Export options.
#
lib{zycore}:
{
  c.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  c.export.libs = $intf_libs
}

if ($c.target.class != 'windows')
{
  c.libs += -pthread

  lib{zycore}:
  {
    c.export.libs += -pthread
  }
}

liba{zycore}: c.export.poptions += -DZYCORE_STATIC
libs{zycore}: c.export.poptions += -DZYCORE_SHARED

# For pre-releases use the complete version to make sure they cannot
# be used in place of another pre-release or the final version. See
# the version module for details on the version.* variable values.
#
if $version.pre_release
  lib{zycore}: bin.lib.version = "-$version.project_id"
else
  lib{zycore}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
h{*}: install = false
